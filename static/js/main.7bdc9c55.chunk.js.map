{"version":3,"sources":["axios.js","Row.js","requests.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","useEffect","a","get","request","data","results","fetchData","console","table","className","map","movie","src","poster_path","backdrop_path","alt","name","id","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchNetflixOriginals2","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sRAMeA,E,OAJEC,EAAMC,OAAO,CAC1BC,QAAS,iC,eCqCEC,MAlCf,YAA+C,IAAhCC,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,WAC9B,EAA4BC,mBAAS,IAArC,mBAAOC,EAAP,KAAeC,EAAf,KAaA,OAXAC,qBAAU,WAAM,4CACd,4BAAAC,EAAA,sEACwBX,EAAMY,IAAIP,GADlC,cACQQ,EADR,OAGEJ,EAAUI,EAAQC,KAAKC,SAHzB,kBAISF,GAJT,4CADc,uBAAC,WAAD,wBAOdG,KACC,CAACX,IACJY,QAAQC,MAAMV,GAGZ,sBAAKW,UAAU,MAAf,UAEE,6BAAKf,IACL,qBAAKe,UAAU,eAAf,SACGX,EAAOY,KAAI,SAACC,GAAD,OACV,qBAEEF,UAAS,sBAAiBb,GAAc,oBACxCgB,IAAG,UAzBE,wCAyBF,OACDhB,EAAae,EAAME,YAAcF,EAAMG,eAEzCC,IAAKJ,EAAMK,MALNL,EAAMM,aC3BjBC,EAAS,mCAQAC,EANE,CACfC,cAAc,8BAAD,OAAgCF,EAAhC,mBACbG,sBAAsB,wBAAD,OAA0BH,EAA1B,qBACrBI,uBAAuB,wBAAD,OAA0BJ,EAA1B,sBC0BTK,MA1Bf,WACE,OACE,sBAAKd,UAAU,MAAf,UACE,uDACA,cAAC,EAAD,CACEf,MAAM,8BACNC,SAAUwB,EAASE,sBACnBzB,YAAU,IAEZ,cAAC,EAAD,CACEF,MAAM,iCACNC,SAAUwB,EAASG,yBAErB,cAAC,EAAD,CACE5B,MAAM,2BACNC,SAAUwB,EAASC,cACnBxB,YAAU,IAEZ,cAAC,EAAD,CACEF,MAAM,4BACNC,SAAUwB,EAASC,oBCbZI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7bdc9c55.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://api.themoviedb.org/3\"\r\n});\r\n\r\nexport default instance;","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"./axios\";\r\nimport \"./Row.css\";\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\r\n\r\nfunction Row({ title, fetchUrl, isLargeRow }) {\r\n  const [movies, setMovies] = useState([]);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(fetchUrl);\r\n      // console.log(request.data.results[2]);\r\n      setMovies(request.data.results);\r\n      return request;\r\n    }\r\n    fetchData();\r\n  }, [fetchUrl]);\r\n  console.table(movies);\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      {/* title */}\r\n      <h2>{title}</h2>\r\n      <div className=\"row__posters\">\r\n        {movies.map((movie) => (\r\n          <img\r\n            key={movie.id}\r\n            className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\r\n            src={`${base_url}${\r\n              isLargeRow ? movie.poster_path : movie.backdrop_path\r\n            }`}\r\n            alt={movie.name}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Row;\r\n","const API_KEY= \"639a25c6016a599d45d3203b608da9cd\";\r\n\r\nconst requests = {\r\n  fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n  fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_network=213`,\r\n  fetchNetflixOriginals2: `/discover/tv?api_key=${API_KEY}&with_network=213`,\r\n};\r\n\r\nexport default requests;","// import logo from './logo.svg';\nimport './App.css';\nimport Row from './Row';\nimport requests from './requests';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Shebl Movies Database</h1>\n      <Row\n        title=\"NETFLIX ORIGINALS Posters V\"\n        fetchUrl={requests.fetchNetflixOriginals}\n        isLargeRow\n      />\n      <Row\n        title=\"NETFLIX ORIGINALS Backdrop Ver\"\n        fetchUrl={requests.fetchNetflixOriginals2}\n      />\n      <Row\n        title=\"Trending Now Posters Ver\"\n        fetchUrl={requests.fetchTrending}\n        isLargeRow\n      />\n      <Row\n        title=\"Trending Now Backdrop Ver\"\n        fetchUrl={requests.fetchTrending}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}