{"version":3,"sources":["axios.js","Row.js","requests.js","Banner.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","useEffect","a","get","request","data","results","fetchData","className","map","movie","src","poster_path","backdrop_path","alt","name","id","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchNeActionMovies","fetchComedyMovies","fetchHorrorMovies","Banner","str","n","setMovie","Math","floor","random","length","console","log","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"ySAMeA,E,OAJEC,EAAMC,OAAO,CAC1BC,QAAS,iC,eC4CEC,MAzCf,YAA+C,IAAhCC,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,WAC9B,EAA4BC,mBAAS,IAArC,mBAAOC,EAAP,KAAeC,EAAf,KAcA,OAZAC,qBAAU,WAAM,4CACd,4BAAAC,EAAA,sEACwBX,EAAMY,IAAIP,GADlC,cACQQ,EADR,OAGEJ,EAAUI,EAAQC,KAAKC,SAHzB,kBAISF,GAJT,4CADc,uBAAC,WAAD,wBAOdG,KACC,CAACX,IAKF,sBAAKY,UAAU,MAAf,UAEE,6BAAKb,IAEL,qBAAKa,UAAU,eAAf,SACGT,EAAOU,KAAI,SAACC,GAAD,OACV,qBAEEF,UAAS,sBAAiBX,GAAc,oBACxCc,IAAG,UA3BE,wCA2BF,OACDd,EAAaa,EAAME,YAAcF,EAAMG,eAEzCC,IAAKJ,EAAMK,MALNL,EAAMM,aC7BjBC,EAAS,mCAaAC,EAXE,CACfC,cAAc,8BAAD,OAAgCF,EAAhC,mBACbG,sBAAsB,wBAAD,OAA0BH,EAA1B,qBACrBI,cAAc,4BAAD,OAA8BJ,EAA9B,mBACbK,oBAAoB,2BAAD,OAA6BL,EAA7B,mBACnBM,kBAAkB,2BAAD,OAA6BN,EAA7B,mBACjBO,kBAAkB,2BAAD,OAA6BP,EAA7B,oB,MC+CJQ,MAhDf,WACE,IAgBgBC,EAAKC,EAhBrB,EAA0B7B,mBAAS,IAAnC,mBAAOY,EAAP,KAAckB,EAAd,KAoBA,OAlBA3B,qBAAU,WAAM,4CACd,4BAAAC,EAAA,sEACwBX,EAAMY,IAAIe,EAASE,uBAD3C,cACQhB,EADR,OAEEwB,EACExB,EAAQC,KAAKC,QACXuB,KAAKC,MAAMD,KAAKE,SAAW3B,EAAQC,KAAKC,QAAQ0B,OAAS,KAJ/D,kBAOS5B,GAPT,4CADc,uBAAC,WAAD,wBAUdG,KACC,IACH0B,QAAQC,IAAIxB,GAOV,wBACEF,UAAU,SACV2B,MAAO,CACLC,eAAgB,QAChBC,gBAAgB,QAAD,OA5BN,wCA4BM,cAAqB3B,QAArB,IAAqBA,OAArB,EAAqBA,EAAOE,YAA5B,sBAGf0B,mBAAoB,iBAPxB,SAUE,sBAAK9B,UAAU,mBAAf,UACE,oBAAIA,UAAU,gBAAd,UAAoC,OAALE,QAAK,IAALA,OAAA,EAAAA,EAAOf,SAAP,OAAgBe,QAAhB,IAAgBA,OAAhB,EAAgBA,EAAOK,QAAvB,OAA+BL,QAA/B,IAA+BA,OAA/B,EAA+BA,EAAO6B,iBAKrE,sBAAK/B,UAAU,kBAAf,UACE,wBAAQA,UAAU,iBAAlB,kBACA,wBAAQA,UAAU,iBAAlB,wBAEF,oBAAIA,UAAU,sBAAd,UAzBUkB,EAyBmC,OAAChB,QAAD,IAACA,OAAD,EAACA,EAAO8B,SAzBtCb,EAyBgD,KAxBzD,OAAHD,QAAG,IAAHA,OAAA,EAAAA,EAAKM,QAASL,EAAID,EAAIe,OAAO,EAAGd,EAAG,GAAK,MAAQD,WCE5CgB,MArBf,WACE,OACE,sBAAKlC,UAAU,MAAf,UAEE,cAAC,EAAD,IACA,cAAC,EAAD,CAAKb,MAAM,WAAWC,SAAUsB,EAASC,cAAetB,YAAU,IAClE,cAAC,EAAD,CAAKF,MAAM,cAAcC,SAAUsB,EAASE,wBAC5C,cAAC,EAAD,CAAKzB,MAAM,YAAYC,SAAUsB,EAASG,cAAexB,YAAU,IACnE,cAAC,EAAD,CAAKF,MAAM,SAASC,SAAUsB,EAASI,sBACvC,cAAC,EAAD,CAAK3B,MAAM,SAASC,SAAUsB,EAASK,oBACvC,cAAC,EAAD,CAAK5B,MAAM,SAASC,SAAUsB,EAASM,wBCJ9BmB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0b93295f.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://api.themoviedb.org/3\"\r\n});\r\n\r\nexport default instance;","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"./axios\";\r\nimport \"./Row.css\";\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\r\n\r\nfunction Row({ title, fetchUrl, isLargeRow }) {\r\n  const [movies, setMovies] = useState([]);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(fetchUrl);\r\n      // console.log(request.data.results);\r\n      setMovies(request.data.results);\r\n      return request;\r\n    }\r\n    fetchData();\r\n  }, [fetchUrl]);\r\n\r\n  // console.log(movies);\r\n  // console.table(movies);\r\n  return (\r\n    <div className=\"row\">\r\n      {/* title */}\r\n      <h2>{title}</h2>\r\n\r\n      <div className=\"row__posters\">\r\n        {movies.map((movie) => (\r\n          <img\r\n            key={movie.id}\r\n            className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\r\n            src={`${base_url}${\r\n              isLargeRow ? movie.poster_path : movie.backdrop_path\r\n            }`}\r\n            alt={movie.name}\r\n            // onClick= {console.log('Clicked')}\r\n          />\r\n        ))}\r\n      </div>\r\n      {/* <div className=\"movieName\">{movies.map((movie) =>(\r\n        <h2>{movie.original_title}</h2>\r\n\r\n      ))}</div> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Row;\r\n","const API_KEY= \"639a25c6016a599d45d3203b608da9cd\";\r\n\r\nconst requests = {\r\n  fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n  fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_network=213`,\r\n  fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n  fetchNeActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n  fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n  fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n  // fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n  // fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n};\r\n\r\nexport default requests;","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"./axios\";\r\nimport requests from \"./requests\";\r\nimport \"./Banner.css\";\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\r\n\r\nfunction Banner() {\r\n  const [movie, setMovie] = useState([]);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(requests.fetchNetflixOriginals);\r\n      setMovie(\r\n        request.data.results[\r\n          Math.floor(Math.random() * request.data.results.length - 1)\r\n        ]\r\n      );\r\n      return request;\r\n    }\r\n    fetchData();\r\n  }, []);\r\n  console.log(movie);\r\n\r\nfunction truncate(str, n){\r\n    return str?.length > n ? str.substr(0, n -1) + \"...\" : str;\r\n}\r\n\r\n  return (\r\n    <header\r\n      className=\"banner\"\r\n      style={{\r\n        backgroundSize: \"cover\",\r\n        backgroundImage: `url(\"${base_url}${movie?.poster_path}\"\r\n\r\n            )`,\r\n        backgroundPosition: \"center center\",\r\n      }}\r\n    >\r\n      <div className=\"banner__contents\">\r\n        <h1 className=\"banner__title\">{movie?.title || movie?.name || movie?.original_name}</h1>\r\n        {/* <div className=\"banner__button\">\r\n            <button className=\"banner__button\">Play</button>\r\n            <button className=\"banner__button\">My List</button>\r\n        </div> */}\r\n        <div className=\"banner__buttons\">\r\n          <button className=\"banner__button\">Play</button>\r\n          <button className=\"banner__button\">My List</button>\r\n        </div>\r\n        <h1 className=\"banner__description\">{truncate(movie?.overview, 150)}</h1>\r\n      </div>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Banner;\r\n","// import logo from './logo.svg';\nimport './App.css';\nimport Row from './Row';\nimport requests from './requests';\nimport Banner from './Banner';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* <h1>Shebl Movies Database</h1> */}\n      <Banner/>\n      <Row title=\"Trending\" fetchUrl={requests.fetchTrending} isLargeRow />\n      <Row title=\" ORIGINALS \" fetchUrl={requests.fetchNetflixOriginals} />\n      <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated} isLargeRow />\n      <Row title=\"Action\" fetchUrl={requests.fetchNeActionMovies} />\n      <Row title=\"Comedy\" fetchUrl={requests.fetchComedyMovies} />\n      <Row title=\"Horror\" fetchUrl={requests.fetchHorrorMovies} />\n      {/* <Row title=\"Romance\" fetchUrl={requests.fetchRomanceMovies} isLargeRow />\n      <Row\n        title=\"Documentaries\"\n        fetchUrl={requests.fetchDocumentaries}\n        isLargeRow\n      /> */}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}